{"version":3,"sources":["components/layout/Navbar.js","components/pages/Home.js","components/pages/Users.js","components/auth/SignInWidget.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","src","width","height","alt","type","data-toggle","data-target","id","Component","withAuth","state","authenticated","checkAuthentication","a","props","auth","isAuthenticated","setState","login","logout","this","mainContent","onClick","Users","currentUserName","currentUserEmail","idToken","JSON","parse","localStorage","getItem","claims","email","name","title","style","border","SignInWidget","el","ReactDOM","findDOMNode","widget","OktaSignIn","baseUrl","logo","authParams","pkce","renderEl","onSuccess","onError","remove","res","status","redirect","sessionToken","session","token","err","console","log","pathname","onAuthRequired","history","push","App","issuer","clientId","redirectUri","window","location","origin","path","exact","component","Home","render","ImplicitCallback","Boolean","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e38a16e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n class Navbar extends Component {\r\n    render() {\r\n        return (\r\n          <nav className=\"navbar navbar-expand-sm navbar-light bg-light mb-4\">\r\n          <div className=\"container\">\r\n            <Link className=\"navbar-brand \" to=\"/\">\r\n              <img src=\"/logo.png\"\r\n              width=\"90\"\r\n              height=\"30\"\r\n              alt=\"logo\"\r\n              />\r\n              EDITOR PORTAL\r\n            </Link>\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#navbarNav\"\r\n            >\r\n              <span className=\"navbar-toggler-icon\" />\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n              <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/\">\r\n                    Home\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/Users\">\r\n                   Users\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar;","// src/Home.js\r\n//import here below initilize down below\r\n//import App from \"../../trello/components/App\";\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withAuth } from '@okta/okta-react';\r\n\r\nexport default withAuth(class Home extends Component {\r\n state = {authenticated:null};\r\n\r\ncheckAuthentication =  async  () => {\r\n    const authenticated = await this.props.auth.isAuthenticated();\r\n    if (authenticated !== this.state.authenticated) {\r\n      this.setState({ authenticated });\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    this.checkAuthentication();\r\n  }\r\n\r\n login =   async () => {\r\n    this.props.auth.login('/');\r\n  }\r\n\r\n logout =   async () => {\r\n    this.props.auth.logout('/');\r\n  }\r\n\r\n  render() {\r\n    if (this.state.authenticated === null) return null;\r\n\r\n    const mainContent = this.state.authenticated ?(\r\n        <div> \r\n            <p className=\"lead\">You have entered the portal, </p>\r\n           <h2> <Link to=\"/Users\">Click Here</Link></h2>\r\n           <h2> <Link to='rt/react-trello-example-master'>Click Here2</Link></h2>\r\n           <button className=\"btn btn-light btn-lg\" onClick={this.logout}>Logout</button>\r\n           \r\n        </div>\r\n        //do <App /> above 2 lines\r\n    ):(\r\n        <div>\r\n           <p className=\"lead\">If you are a User, please get your credentials from Mitch </p>\r\n           <button className=\"btn btn-light btn-lg\" onClick={this.login}>Login</button>\r\n        </div>\r\n    );\r\n      \r\n\r\n    return (\r\n      <div className=\"jumbotron\">\r\n      <h1 className=\"display-4\">Turf Portal</h1>\r\n      {mainContent}\r\n\r\n      </div>\r\n    );\r\n  }\r\n});","import React, { Component } from 'react';\r\n//import DndTest from '../Dnd/DndTest';\r\n//import App from '../../trello/components/NewLaneForm';\r\n//import {Board} from '../react-trello-example-master';\r\n\r\nclass Users extends Component {\r\n    state = {\r\n        currentUserName: '',\r\n        currentUserEmail: '',\r\n    }\r\n\r\n    componentDidMount(){\r\n        const idToken = JSON.parse(localStorage.getItem('okta-token-storage'));\r\n        this.setState({\r\n            currentUserEmail:idToken.idToken.claims.email,\r\n            currentUserName:idToken.idToken.claims.name,\r\n        })\r\n    }\r\n    render() {\r\n        const {currentUserEmail, currentUserName} = this.state;\r\n\r\n        return (\r\n           <div><h3>Welcome {currentUserName}</h3>\r\n           <p>Email: {currentUserEmail} </p>\r\n           <p>You have reached authorized area of portal</p>\r\n\r\n          <div>\r\n          <iframe src='/trello' title='trello-bard' style={{width:'100%', height:'calc(70vh)', border:'0px'}}> Error board load </iframe>\r\n        \r\n          </div>\r\n\r\n           </div>\r\n           \r\n             \r\n           \r\n           \r\n         \r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport OktaSignIn from '@okta/okta-signin-widget';\r\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\r\n//import '@okta/okta-signin-widget/dist/css/okta-theme.css';\r\n\r\nclass SignInWidget extends Component {\r\n  componentDidMount() {\r\n    const el = ReactDOM.findDOMNode(this);\r\n    this.widget = new OktaSignIn({\r\n      baseUrl: this.props.baseUrl,\r\n      logo:'logo.png',\r\n      authParams: {\r\n        pkce: true\r\n      }\r\n    });\r\n    this.widget.renderEl({el}, this.props.onSuccess, this.props.onError);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.widget.remove();\r\n  }\r\n\r\n  render() {\r\n    return <div />;\r\n  }\r\n};\r\n\r\nexport default SignInWidget;","// src/Login.js\r\n\r\nimport React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport SignInWidget from './SignInWidget';\r\nimport { withAuth } from '@okta/okta-react';\r\n\r\nexport default withAuth(class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n   \r\n    this.state = {\r\n      authenticated: null\r\n    };\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  async checkAuthentication() {\r\n    const authenticated = await this.props.auth.isAuthenticated();\r\n    if (authenticated !== this.state.authenticated) {\r\n      this.setState({ authenticated });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  onSuccess = (res) => {\r\n    if (res.status === 'SUCCESS') {\r\n      return this.props.auth.redirect({\r\n        sessionToken: res.session.token\r\n      });\r\n   } else {\r\n    // The user can be in another authentication state that requires further action.\r\n    // For more information about these states, see:\r\n    //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\r\n    }\r\n  }\r\n\r\n  onError = (err) => {\r\n    console.log('error logging in', err);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.authenticated === null) return null;\r\n    return this.state.authenticated ?\r\n      <Redirect to={{ pathname: '/' }}/> :\r\n      <SignInWidget\r\n        baseUrl={this.props.baseUrl}\r\n        onSuccess={this.onSuccess}\r\n        onError={this.onError}/>;\r\n  }\r\n});","import React from 'react';\nimport Navbar from './components/layout/Navbar';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {Security, SecureRoute, ImplicitCallback} from '@okta/okta-react';\n\n\nimport Home from './components/pages/Home'; \nimport Users from './components/pages/Users'; \nimport Login from './components/auth/Login'; \nimport './App.css';\n\nfunction onAuthRequired({history}){\n  history.push('/login');\n}\n\nfunction App() {\n  return (\n    <Router>\n     <Security issuer='https://dev-355285.okta.com/oauth2/default'\n                  clientId='0oa24hpswpz4rgS974x6'\n                  redirectUri={window.location.origin + '/implicit/callback'}\n                  onAuthRequired={onAuthRequired}\n                  pkce={true} >\n    <div className=\"App\">\n      <Navbar />\n <div className=\"container\">\n    <Route path=\"/\" exact={true} component={Home} />\n    <SecureRoute path=\"/users\" exact={true} component={Users} />\n    <Route path='/login' render={() => <Login baseUrl='https://dev-355285.okta.com' />} />\n    <Route path='/implicit/callback' component={ImplicitCallback} />\n  </div>\n    </div>\n    </Security>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}